# -*- coding: utf-8 -*-
"""Chatgpt code premium prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I7okbt8dzs0r878EkWMnb0aPR6Q_6Af_
"""

import pandas as pd
from flask import Flask, request, render_template, jsonify
import numpy as np
import joblib
import logging

# Application logging
# Configuring logging operations

logging.basicConfig(filename='app_deployment_logs.log', level=logging.INFO,
                    format='%(levelname)s:%(asctime)s:%(message)s')

# Create Flask object to Run
app = Flask(__name__)

# Load the model and scalar objects from joblib files
best_model = joblib.load(open("best_model.joblib", "rb"))
scalar = joblib.load(open("scalar.joblib", "rb"))


@app.route('/')
def home():
    return render_template('index.html')


@app.route('/predict_api', methods=['POST'])
def predict_api():
    try:
        data = request.json['data']
        logging.info(f"Input data: {data}")
        input_data = np.array(list(data.values())).reshape(1, -1)
        logging.info(f"Input data reshaped: {input_data}")
        new_data = scalar.transform(input_data)
        output = best_model.predict(new_data)
        logging.info(f"Output: {output[0]}")
        return jsonify(output[0])
    except:
        logging.exception("Error predicting output")
        return jsonify({"error": "Error predicting output"}), 500


@app.route('/predict', methods=['POST'])
def predict():
    try:
        data = [float(x) for x in request.form.values()]
        final_input = scalar.transform(np.array(data).reshape(1, -1))
        logging.info(f"Input data: {data}")
        output = best_model.predict(final_input)[0]
        logging.info(f"Output: {output}")
        return render_template("index.html", prediction_text=f"The Insurance Premium is {output}")
    except:
        logging.exception("Error predicting output")
        return render_template("index.html", prediction_text="Error predicting output")


if __name__ == "__main__":
    app.run(debug=True)

